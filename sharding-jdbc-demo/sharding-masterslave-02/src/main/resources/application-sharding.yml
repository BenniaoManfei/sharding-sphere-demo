

sharding:
  jdbc:
    datasource:
      names: ds_master_0,ds_master_1,ds_master_0_slave_0,ds_master_1_slave_0
      ds_master_0:
        type: org.apache.commons.dbcp.BasicDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.134.128:3306/demo_ds_0
        username: root
        password: 123456
      ds_master_1:
        type: org.apache.commons.dbcp.BasicDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.134.128:3306/demo_ds_1
        username: root
        password: 123456
      ds_master_0_slave_0:
        type: org.apache.commons.dbcp.BasicDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.134.128:3316/demo_ds_0
        username: slave_reader
        password: 123456
      ds_master_1_slave_0:
        type: org.apache.commons.dbcp.BasicDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://192.168.134.128:3316/demo_ds_1
        username: slave_reader
        password: 123456
    config:
      sharding:
        # 默认指针列值生成器类类名称，缺省使用io.shardingsphere.core.keygen.DefaultKeyGenerator
        # 如果自定义实现io.shardingsphere.core.keygen.KeyGenerator接口并提供无参构造方法
        default-key-generator-class-name: com.daniel.sharding.sphere.shardingmasterslave02.keygenerator.MyKeyGenerator
        props:
          sql:
            show: true # 显示sql
          #executor:
            #size: 4 # 工作线程数量，默认是CPU核数
        # 未配置分片规则的表将通过默认的数据源定位
        default-data-source-name: ds_master_0
        # 数据库分片策略
        default-database-strategy:
          inline:
            sharding-column: user_id
            algorithm-expression: ds_$->{user_id % 2}
        # 默认的分表策略
        #default-table-strategy:

        tables:
          t_order_item:
            actual-data-nodes: ds_$->{0..1}.t_order_item_$->{0..1}
            table-strategy:
              inline:
                sharding-column: order_id
                algorithm-expression: t_order_item_$->{order_id % 2}
            key-generator-column-name: order_item_id
            #key-generator-class-name: com.daniel.sharding.sphere.shardingmasterslave01.keygenerator.MyKeyGenerator
          t_order:
            actual-data-nodes: ds_$->{0..1}.t_order_$->{0..1}
            table-strategy:
              inline:
                sharding-column: order_id
                algorithm-expression: t_order_$->{order_id % 2}
            key-generator-column-name: order_id
            #key-generator-class-name: com.daniel.sharding.sphere.shardingmasterslave01.keygenerator.MyKeyGenerator
        # 读写分离数据源配置
        master-slave-rules:
          ds_0:
            master-data-source-name: ds_master_0
            slave-data-source-names: ds_master_0_slave_0
            load-balance-algorithm-type: ROUND_ROBIN
            #load-balance-algorithm-class-name: 从库负载均衡算法类名称。该类需实现MasterSlaveLoadBalanceAlgorithm接口且提供无参数构造器
          ds_1:
            master-data-source-name: ds_master_1
            slave-data-source-names: ds_master_1_slave_0
            load-balance-algorithm-type: RANDOM
            #load-balance-algorithm-class-name: 从库负载均衡算法类名称。该类需实现MasterSlaveLoadBalanceAlgorithm接口且提供无参数构造器
server:
  port: 9011
